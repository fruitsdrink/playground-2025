---
import Button from "./button.astro";
import type { CardItem } from "../_data/types";
import CheckIcon from "../_assets/images/check.svg";
import CrossIcon from "../_assets/images/cross2.svg";

interface Props {
  card: CardItem;
}

const {
  card: {
    tier,
    title,
    description,
    most_popular,
    amount_per_month,
    btn_text,
    features,
  },
} = Astro.props;

const getTierClass = (tier: string) => {
  switch (tier) {
    case "免费":
      return "free";
    case "专业":
      return "pro";
    case "企业":
      return "enterprise";
    default:
      return "free";
  }
};
---

<article class:list={[{ "dark-shadow": most_popular }]}>
  <p class:list={["tier", getTierClass(tier)]}>{tier}</p>
  {most_popular && <p class="badge">推荐计划</p>}

  <div class="details">
    <div class="amt">
      <span class="sign">¥</span>
      <span class="num">{amount_per_month}</span>
      {amount_per_month > 0 && <span class="mo">每月</span>}
    </div>
    <h3 class="title">{title}</h3>
    <p class="desc">{description}</p>
  </div>
  <Button id={tier.toLowerCase()} theme={getTierClass(tier)}>{btn_text}</Button>
  <ul class="features">
    {
      features.map((feature) => (
        <li class="feature">
          {feature.checked ? (
            <CheckIcon class={"green"} />
          ) : (
            <CrossIcon class={"red"} />
          )}
          <p>{feature.title}</p>
        </li>
      ))
    }
  </ul>
</article>

<style>
  :root {
    --clr-bkg: #f4f4f9;
    --clr-text: #0c0c1d;
    --clr-accent-purple: #4c4cb2;
    --clr-accent-yellow: #d0aa25;
    --clr-accent-red: #d93535;
    --clr-accent-green: #1eac3e;

    --shadow--light: 0px 20px 25px 0px rgba(194, 194, 214, 0.3);
    --shadow-dark: 0px 20px 25px 0px rgba(76, 76, 178, 0.2);

    --font-weight: 700;
    --fs--lg: 3.125rem;
    --fs--md: 1.25rem;
    --fs--sm: 0.875rem;

    --space--sm: 10px;
    --space--md: 12px;
    --space--lg: 20px;
    --space--xl: 32px;
    --space--xxl: 60px;

    --rounded: 6px;
  }

  article {
    flex: 1 1 28%;
    background-color: var(--clr-bkg);
    color: var(--clr-text);
    font-weight: bold;
    border-radius: var(--rounded);
    padding: var(--space--xxl) var(--space--lg) var(--space--lg);
    display: grid;
    gap: var(--space--xl);
    box-shadow: var(--shadow--light);
    position: relative;

    &.dark-shadow {
      box-shadow: var(--shadow-dark);
    }
  }

  .tier {
    position: absolute;
    width: 100%;
    text-align: center;
    padding-block: var(--space--sm);
    border-top-right-radius: var(--rounded);
    border-top-left-radius: var(--rounded);
    text-transform: uppercase;
    --local_background: var(--clr-bkg);
    --local_color: var(--clr-accent-purple);
    color: var(--local_color);
    background-color: var(--local_background);
    &.pro {
      --local_background: var(--clr-accent-purple);
      --local_color: var(--clr-bkg);
    }
    &.enterprise {
      --local_background: var(--clr-accent-yellow);
      --local_color: var(--clr-bkg);
    }
  }

  .badge {
    background-color: var(--clr-text);
    color: var(--clr-bkg);
    padding: var(--space--sm);
    max-width: fit-content;
    justify-self: center;
    text-transform: uppercase;
    font-size: var(--fs--sm);
  }

  .details {
    display: grid;
    gap: var(--space--sm);
    place-items: center;
    text-align: center;

    .amt {
      display: grid;
      grid-template-columns: repeat(3, auto);
      max-width: fit-content;

      .num {
        font-size: var(--fs--lg);
        line-height: 1;
      }

      .mo {
        align-self: end;
      }
    }

    .title {
      font-size: var(--fs--md);
      text-transform: uppercase;
      font-weight: bold;
    }

    .desc {
      max-width: 60%;
      font-size: var(--fs--sm);
    }
  }

  .features {
    list-style: none;
    margin-inline: auto;

    .feature {
      display: flex;
      align-items: center;

      .green {
        color: var(--clr-accent-green);
      }

      .red {
        color: var(--clr-accent-red);
      }
    }
  }
</style>
